// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.4
// source: sensors.proto

package sensors

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Sensor update query needs differentiate how sensors to
// update are selected vs. what fields are updated
// TODO need boolean for whether to update annotations or
// replace?
type SensorUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Selector *Sensor `protobuf:"bytes,1,opt,name=selector,proto3" json:"selector,omitempty"`
	Update   *Sensor `protobuf:"bytes,2,opt,name=update,proto3" json:"update,omitempty"`
}

func (x *SensorUpdate) Reset() {
	*x = SensorUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sensors_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SensorUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorUpdate) ProtoMessage() {}

func (x *SensorUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_sensors_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorUpdate.ProtoReflect.Descriptor instead.
func (*SensorUpdate) Descriptor() ([]byte, []int) {
	return file_sensors_proto_rawDescGZIP(), []int{0}
}

func (x *SensorUpdate) GetSelector() *Sensor {
	if x != nil {
		return x.Selector
	}
	return nil
}

func (x *SensorUpdate) GetUpdate() *Sensor {
	if x != nil {
		return x.Update
	}
	return nil
}

// Sensor metadata
type Sensor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uuid / collection not required to re-use as query type
	Uuid        string        `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Collection  string        `protobuf:"bytes,2,opt,name=collection,proto3" json:"collection,omitempty"`
	Name        string        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Unit        string        `protobuf:"bytes,4,opt,name=unit,proto3" json:"unit,omitempty"`
	Ingress     string        `protobuf:"bytes,5,opt,name=ingress,proto3" json:"ingress,omitempty"`
	Annotations []*Annotation `protobuf:"bytes,16,rep,name=annotations,proto3" json:"annotations,omitempty"`
}

func (x *Sensor) Reset() {
	*x = Sensor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sensors_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sensor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sensor) ProtoMessage() {}

func (x *Sensor) ProtoReflect() protoreflect.Message {
	mi := &file_sensors_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sensor.ProtoReflect.Descriptor instead.
func (*Sensor) Descriptor() ([]byte, []int) {
	return file_sensors_proto_rawDescGZIP(), []int{1}
}

func (x *Sensor) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Sensor) GetCollection() string {
	if x != nil {
		return x.Collection
	}
	return ""
}

func (x *Sensor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Sensor) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *Sensor) GetIngress() string {
	if x != nil {
		return x.Ingress
	}
	return ""
}

func (x *Sensor) GetAnnotations() []*Annotation {
	if x != nil {
		return x.Annotations
	}
	return nil
}

type Annotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Annotation) Reset() {
	*x = Annotation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sensors_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Annotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Annotation) ProtoMessage() {}

func (x *Annotation) ProtoReflect() protoreflect.Message {
	mi := &file_sensors_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Annotation.ProtoReflect.Descriptor instead.
func (*Annotation) Descriptor() ([]byte, []int) {
	return file_sensors_proto_rawDescGZIP(), []int{2}
}

func (x *Annotation) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Annotation) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Sensors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count   int32     `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Sensors []*Sensor `protobuf:"bytes,2,rep,name=sensors,proto3" json:"sensors,omitempty"`
}

func (x *Sensors) Reset() {
	*x = Sensors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sensors_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sensors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sensors) ProtoMessage() {}

func (x *Sensors) ProtoReflect() protoreflect.Message {
	mi := &file_sensors_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sensors.ProtoReflect.Descriptor instead.
func (*Sensors) Descriptor() ([]byte, []int) {
	return file_sensors_proto_rawDescGZIP(), []int{3}
}

func (x *Sensors) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Sensors) GetSensors() []*Sensor {
	if x != nil {
		return x.Sensors
	}
	return nil
}

var File_sensors_proto protoreflect.FileDescriptor

var file_sensors_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x22, 0x64, 0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x08, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x2e,
	0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0xb5,
	0x01, 0x0a, 0x06, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x35, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x10,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x2e, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x34, 0x0a, 0x0a, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4a, 0x0a, 0x07,
	0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a,
	0x07, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52,
	0x07, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x32, 0xe7, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x0c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x0f, 0x2e, 0x73, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x1a, 0x0f, 0x2e, 0x73, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x22, 0x00, 0x12, 0x32,
	0x0a, 0x0b, 0x52, 0x65, 0x61, 0x64, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x12, 0x0f, 0x2e,
	0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x1a, 0x10,
	0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73,
	0x22, 0x00, 0x12, 0x39, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x12, 0x15, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x10, 0x2e, 0x73, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x22, 0x00, 0x12, 0x33, 0x0a,
	0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x0f, 0x2e,
	0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x1a, 0x10,
	0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73,
	0x22, 0x00, 0x42, 0x0b, 0x5a, 0x09, 0x2e, 0x3b, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sensors_proto_rawDescOnce sync.Once
	file_sensors_proto_rawDescData = file_sensors_proto_rawDesc
)

func file_sensors_proto_rawDescGZIP() []byte {
	file_sensors_proto_rawDescOnce.Do(func() {
		file_sensors_proto_rawDescData = protoimpl.X.CompressGZIP(file_sensors_proto_rawDescData)
	})
	return file_sensors_proto_rawDescData
}

var file_sensors_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_sensors_proto_goTypes = []interface{}{
	(*SensorUpdate)(nil), // 0: sensors.SensorUpdate
	(*Sensor)(nil),       // 1: sensors.Sensor
	(*Annotation)(nil),   // 2: sensors.Annotation
	(*Sensors)(nil),      // 3: sensors.Sensors
}
var file_sensors_proto_depIdxs = []int32{
	1, // 0: sensors.SensorUpdate.selector:type_name -> sensors.Sensor
	1, // 1: sensors.SensorUpdate.update:type_name -> sensors.Sensor
	2, // 2: sensors.Sensor.annotations:type_name -> sensors.Annotation
	1, // 3: sensors.Sensors.sensors:type_name -> sensors.Sensor
	1, // 4: sensors.SensorService.CreateSensor:input_type -> sensors.Sensor
	1, // 5: sensors.SensorService.ReadSensors:input_type -> sensors.Sensor
	0, // 6: sensors.SensorService.UpdateSensor:input_type -> sensors.SensorUpdate
	1, // 7: sensors.SensorService.DeleteSensor:input_type -> sensors.Sensor
	1, // 8: sensors.SensorService.CreateSensor:output_type -> sensors.Sensor
	3, // 9: sensors.SensorService.ReadSensors:output_type -> sensors.Sensors
	3, // 10: sensors.SensorService.UpdateSensor:output_type -> sensors.Sensors
	3, // 11: sensors.SensorService.DeleteSensor:output_type -> sensors.Sensors
	8, // [8:12] is the sub-list for method output_type
	4, // [4:8] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_sensors_proto_init() }
func file_sensors_proto_init() {
	if File_sensors_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sensors_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SensorUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sensors_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sensor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sensors_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Annotation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sensors_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sensors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sensors_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sensors_proto_goTypes,
		DependencyIndexes: file_sensors_proto_depIdxs,
		MessageInfos:      file_sensors_proto_msgTypes,
	}.Build()
	File_sensors_proto = out.File
	file_sensors_proto_rawDesc = nil
	file_sensors_proto_goTypes = nil
	file_sensors_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SensorServiceClient is the client API for SensorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SensorServiceClient interface {
	CreateSensor(ctx context.Context, in *Sensor, opts ...grpc.CallOption) (*Sensor, error)
	ReadSensors(ctx context.Context, in *Sensor, opts ...grpc.CallOption) (*Sensors, error)
	UpdateSensor(ctx context.Context, in *SensorUpdate, opts ...grpc.CallOption) (*Sensors, error)
	DeleteSensor(ctx context.Context, in *Sensor, opts ...grpc.CallOption) (*Sensors, error)
}

type sensorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSensorServiceClient(cc grpc.ClientConnInterface) SensorServiceClient {
	return &sensorServiceClient{cc}
}

func (c *sensorServiceClient) CreateSensor(ctx context.Context, in *Sensor, opts ...grpc.CallOption) (*Sensor, error) {
	out := new(Sensor)
	err := c.cc.Invoke(ctx, "/sensors.SensorService/CreateSensor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensorServiceClient) ReadSensors(ctx context.Context, in *Sensor, opts ...grpc.CallOption) (*Sensors, error) {
	out := new(Sensors)
	err := c.cc.Invoke(ctx, "/sensors.SensorService/ReadSensors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensorServiceClient) UpdateSensor(ctx context.Context, in *SensorUpdate, opts ...grpc.CallOption) (*Sensors, error) {
	out := new(Sensors)
	err := c.cc.Invoke(ctx, "/sensors.SensorService/UpdateSensor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensorServiceClient) DeleteSensor(ctx context.Context, in *Sensor, opts ...grpc.CallOption) (*Sensors, error) {
	out := new(Sensors)
	err := c.cc.Invoke(ctx, "/sensors.SensorService/DeleteSensor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SensorServiceServer is the server API for SensorService service.
type SensorServiceServer interface {
	CreateSensor(context.Context, *Sensor) (*Sensor, error)
	ReadSensors(context.Context, *Sensor) (*Sensors, error)
	UpdateSensor(context.Context, *SensorUpdate) (*Sensors, error)
	DeleteSensor(context.Context, *Sensor) (*Sensors, error)
}

// UnimplementedSensorServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSensorServiceServer struct {
}

func (*UnimplementedSensorServiceServer) CreateSensor(context.Context, *Sensor) (*Sensor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSensor not implemented")
}
func (*UnimplementedSensorServiceServer) ReadSensors(context.Context, *Sensor) (*Sensors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadSensors not implemented")
}
func (*UnimplementedSensorServiceServer) UpdateSensor(context.Context, *SensorUpdate) (*Sensors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSensor not implemented")
}
func (*UnimplementedSensorServiceServer) DeleteSensor(context.Context, *Sensor) (*Sensors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSensor not implemented")
}

func RegisterSensorServiceServer(s *grpc.Server, srv SensorServiceServer) {
	s.RegisterService(&_SensorService_serviceDesc, srv)
}

func _SensorService_CreateSensor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Sensor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorServiceServer).CreateSensor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sensors.SensorService/CreateSensor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorServiceServer).CreateSensor(ctx, req.(*Sensor))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensorService_ReadSensors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Sensor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorServiceServer).ReadSensors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sensors.SensorService/ReadSensors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorServiceServer).ReadSensors(ctx, req.(*Sensor))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensorService_UpdateSensor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SensorUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorServiceServer).UpdateSensor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sensors.SensorService/UpdateSensor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorServiceServer).UpdateSensor(ctx, req.(*SensorUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensorService_DeleteSensor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Sensor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorServiceServer).DeleteSensor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sensors.SensorService/DeleteSensor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorServiceServer).DeleteSensor(ctx, req.(*Sensor))
	}
	return interceptor(ctx, in, info, handler)
}

var _SensorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sensors.SensorService",
	HandlerType: (*SensorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSensor",
			Handler:    _SensorService_CreateSensor_Handler,
		},
		{
			MethodName: "ReadSensors",
			Handler:    _SensorService_ReadSensors_Handler,
		},
		{
			MethodName: "UpdateSensor",
			Handler:    _SensorService_UpdateSensor_Handler,
		},
		{
			MethodName: "DeleteSensor",
			Handler:    _SensorService_DeleteSensor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sensors.proto",
}
